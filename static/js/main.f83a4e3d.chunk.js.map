{"version":3,"sources":["components/header/Header.tsx","utils/api.ts","utils/urls.ts","components/spinner/Spinner.tsx","components/photoFrame/PhotoFrame.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","fetchPhotos","pos","a","axios","get","getApiUrl","data","console","error","latitude","longitude","getImageUrls","map","img","farm","server","id","secret","Spinner","viewBox","PhotoFrame","useState","photos","setPhotos","loading","setLoading","setError","photoIndex","setPhotoIndex","useEffect","navigator","geolocation","getCurrentPosition","getPhotos","locationFailure","enableHighAccuracy","timeout","maximumAge","coords","photo","e","getPreviousPhoto","type","key","length","getNextPhoto","onClick","xmlns","tabIndex","onKeyUp","d","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f83a4e3d.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\n\nexport const Header = (): ReactElement => {\n  return (\n    <header className=\"text-center border-b-2 pt-6 pb-3 z-10 absolute top-0 left-0 w-screen shadow-lg bg-gray-900 text-blue-100\">\n      <h1 className=\"text-5xl font-bold mb-4\">Photos From Here</h1>\n      <p className=\"text-center text-xl italic\">See photos that were taken near you!</p>\n    </header>\n  );\n};\n","import axios from \"axios\";\nimport { getApiUrl } from \".\";\nimport { FlickrData } from \"../shared/types\";\n\nexport const fetchPhotos = async (pos: GeolocationCoordinates): Promise<FlickrData | undefined> => {\n  try {\n    const { data }: { data: FlickrData } = await axios.get<FlickrData>(getApiUrl(pos));\n    return data;\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import { PhotoData } from \"../shared/types\";\n\n/** Returns fully-built Flickr API url with geolocation-specific request */\nexport const getApiUrl = (pos: GeolocationCoordinates): string => {\n  /** Proxy server to handle Flicker not utilizing CORS */\n  const CORS_ANYWHERE_PROXY: string = \"https://shrouded-mountain-15003.herokuapp.com/\";\n  const FLIKR_API: string =\n    \"https://flickr.com/services/rest/?api_key=7771513eb517ec84aa1710b81f5fc710&format=json&nojsoncallback=1&method=flickr.photos.search&safe_search=1&perpage=5&lat=\";\n\n  return `${CORS_ANYWHERE_PROXY}${FLIKR_API}${pos.latitude}&lon=${pos.longitude}&accuracy=13`;\n};\n\n/** Return src url for individual Flickr image */\nexport const getImageUrls = (data: PhotoData[]): string[] => {\n  return data.map((img) => `https://farm${img.farm}.staticflickr.com/${img.server}/${img.id}_${img.secret}.jpg`);\n};\n","import React, { ReactElement } from \"react\";\nimport \"./spinner.css\";\n\n/** A simple loading spinner */\nexport const Spinner = (): ReactElement => {\n  return <svg className=\"animate-spin h-24 w-24 border-8 border-l-0  border-gray-800 spinner rounded-full cursor-wait\" viewBox=\"0 0 24 24\" />;\n};\n","import React, { useState, useEffect, ReactElement } from \"react\";\nimport { fetchPhotos, getImageUrls } from \"../../utils\";\nimport { Spinner } from \"../spinner\";\n\n/** UI Component for displaying and navigating photos returned from Flickr's API\n *\n * Includes loading Spinner, error handling, and keyboard-focusable navigation elements.\n */\nexport const PhotoFrame = (): ReactElement => {\n  const [photos, setPhotos] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string>(\"\");\n  const [photoIndex, setPhotoIndex] = useState<number>(0);\n\n  useEffect((): void => {\n    /** Requests permission to use geolocation information */\n    const requestGeolocation = (): void => {\n      navigator.geolocation.getCurrentPosition(getPhotos, locationFailure, {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0,\n      });\n    };\n    requestGeolocation();\n  }, []);\n\n  /** Fetch and store photos taken near user's geolocation\n   *\n   * Success callback for requestGeolocation()\n   */\n  const getPhotos = async (pos: GeolocationPosition): Promise<void> => {\n    const { coords }: { coords: GeolocationCoordinates } = pos;\n    const data = await fetchPhotos(coords);\n    if (data) {\n      setPhotos(getImageUrls(data.photos.photo));\n    }\n    setLoading(false);\n  };\n\n  /** Set error message\n   *\n   * Failure callback for requestGeolocation()\n   */\n  const locationFailure = (e: unknown) => {\n    setError(\"We were unable to find your location.\");\n  };\n\n  /** Load previous photo */\n  const getPreviousPhoto = (e: React.MouseEvent | React.KeyboardEvent): void => {\n    if (e.type === \"keyup\") {\n      if ((e as React.KeyboardEvent).key !== \"Enter\" && (e as React.KeyboardEvent).key !== \" \") {\n        return;\n      }\n    }\n    photoIndex > 0 ? setPhotoIndex(photoIndex - 1) : setPhotoIndex(photos.length - 1);\n  };\n\n  /** Load next photo */\n  const getNextPhoto = (e: React.MouseEvent | React.KeyboardEvent): void => {\n    if (e.type === \"keyup\") {\n      if ((e as React.KeyboardEvent).key !== \"Enter\" && (e as React.KeyboardEvent).key !== \" \") {\n        return;\n      }\n    }\n    photoIndex < photos.length - 1 ? setPhotoIndex(photoIndex + 1) : setPhotoIndex(0);\n  };\n\n  return (\n    // background\n    <div className=\"flex justify-center items-center border-gray-500 border h-screen bg-indigo-100\">\n      {/* left navigation pane / chevron */}\n      <div className=\"bg-gray-700 h-2/5 w-32 rounded-l-lg flex items-center justify-center cursor-pointer\" onClick={getPreviousPhoto}>\n        <svg\n          className=\"fill-current text-blue-200 h-24 w-24 cursor-pointer\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 20 20\"\n          onClick={getPreviousPhoto}\n          tabIndex={0}\n          onKeyUp={(e: React.KeyboardEvent<SVGSVGElement>): void => getPreviousPhoto(e)}\n        >\n          <path d=\"M10 20a10 10 0 1 1 0-20 10 10 0 0 1 0 20zm8-10a8 8 0 1 0-16 0 8 8 0 0 0 16 0zM7.46 9.3L11 5.75l1.41 1.41L9.6 10l2.82 2.83L11 14.24 6.76 10l.7-.7z\" />\n        </svg>\n      </div>\n\n      {/* Spinner, current photo, or error message */}\n      <div className=\"ring-4 w-1/2 rounded-t-lg flex justify-center items-center h-3/5 bg-gray-800 p-14 shadow-inner z-10\">\n        {error ? (\n          <p className=\"text-base text-indigo-100 text-center\">{error}</p>\n        ) : loading ? (\n          <Spinner />\n        ) : photos ? (\n          <img className={`select-none shadow-2xl`} src={photos[photoIndex]} alt={photos[photoIndex]} />\n        ) : null}\n      </div>\n\n      {/* right navigation pane / chevron */}\n      <div className=\"bg-gray-700 h-2/5 w-32 rounded-r-lg flex items-center justify-center cursor-pointer\" onClick={getNextPhoto}>\n        <svg\n          className=\"fill-current text-blue-200 h-24 w-24 cursor-pointer\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 20 20\"\n          onClick={getNextPhoto}\n          tabIndex={0}\n          onKeyUp={(e: React.KeyboardEvent<SVGSVGElement>): void => getNextPhoto(e)}\n        >\n          <path d=\"M10 0a10 10 0 1 1 0 20 10 10 0 0 1 0-20zM2 10a8 8 0 1 0 16 0 8 8 0 0 0-16 0zm10.54.7L9 14.25l-1.41-1.41L10.4 10 7.6 7.17 9 5.76 13.24 10l-.7.7z\" />\n        </svg>\n      </div>\n    </div>\n  );\n};\n","import React, { ReactElement } from \"react\";\nimport { Header, PhotoFrame } from \"./components\";\n\nconst App = (): ReactElement => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <PhotoFrame />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}